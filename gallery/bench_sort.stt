make Run [
    * start
    * len
]

make Array.merge_sort(v) {
    var MIN_RUN = 10;

    var len = v.length();
    # TODO insert sort for small list

    var runs = Array.new(len / MIN_RUN + 1);  # maximum number of runs
    var runs_len = 0;
    var end = len;
    while end > 0 {
        var start = end - 1;
        if start > 0 {
            start = start - 1;
            if v.at(start + 1) < v.at(start) {
                while start > 0 and v.at(start) < v.at(start - 1) {
                    start = start - 1;
                }
                Array.reverse(v.view(start, end - start));
            } else {
                while start > 0 and not v.at(start) < v.at(start - 1) {
                    start = start - 1;
                }
            }
        }

        while start > 0 and end - start < MIN_RUN {
            start = start - 1;
            Array.insert_head(v.view(start, end - start));
        }

        # runs.push(...)
        runs.at(runs_len, Run[start = start, len = end - start]);
        runs_len = runs_len + 1;
        end = start;

        while collapse(runs.view(0, runs_len)) is Some r {
            var left = runs.at(r + 1);
            var right = runs.at(r);
            merge(v.view(left.start, left.len + right.len), left.len);
            runs.at(r, Run[start = left.start, len = left.len + right.len]);
            # runs.remove(r + 1);
            runs_len = runs_len - 1;
            Array.swap(runs, r + 1, runs_len);
        }
    }

    assert runs_len == 1;
    assert runs.at(0).start == 0;
    assert runs.at(0).len == len;
    Option[None]
}

make ArrayView [
    * data
    * offset
    * length
]

make (Array a) view(offset, length) {
    assert offset + length <= a.length();
    ArrayView[data = a, offset = offset, length = length]
}

make (ArrayView a) clone() {
    # technically this equals `Array.new(a.length)` then copy per element
    # I choose not to because even Java "cheat" on this with native method
    (a.data).clone(a.offset, a.length)
}

make (ArrayView a) length() {
    a.length
}

make (ArrayView a) at(p) {
    (a.data).at(p + a.offset)  # check bounds?
}

make (ArrayView a) at(p, element) {
    (a.data).at(p + a.offset, element);
    Option[None]
}

make (ArrayView a) view(offset, length) {
    assert offset + length <= a.length;
    ArrayView[data = a.data, offset = offset + a.offset, length = length]
}

make Array.swap(a, i, j) {
    var x = a.at(i);
    a.at(i, a.at(j));
    a.at(j, x);
    Option[None]
}

make Array.reverse(a) {
    var low = 0;
    var high = a.length() - 1;
    while low < high {
        Array.swap(a, low, high);
        low = low + 1;
        high = high - 1;
    }
    Option[None]
}

make Array.insert_head(a) {
    var len = a.length();
    if not (len >= 2 and a.at(1) < a.at(0)) {
        return Option[None];
    }
    var x = a.at(0);
    a.at(0, a.at(1));
    var d = 1;
    var i = 2;
    while i < len {
        if not a.at(i) < x {
            break;
        }
        a.at(i - 1, a.at(i));
        d = i;
        i = i + 1;
    }
    a.at(d, x);
    Option[None]
}

make collapse(runs) {
    var n = runs.length();
    if n >= 2
        and (
            runs.at(n - 1).start == 0
            or runs.at(n - 2).len <= runs.at(n - 1).len
            or n >= 3 and runs.at(n - 3).len <= runs.at(n - 2).len + runs.at(n - 1).len
            or n >= 4 and runs.at(n - 4).len <= runs.at(n - 3).len + runs.at(n - 2).len)
    {
        if n >= 3 and runs.at(n - 3).len < runs.at(n - 1).len {
            Option[Some = n - 3]
        } else {
            Option[Some = n - 2]
        }
    } else {
        Option[None]
    }
}

make merge(a, mid) {
    var len = a.length();
    if mid <= len - mid {
        # clone the left run (a[..mid]) and merge forwards
        var buf = a.view(0, mid).clone();
        var left_i = 0;
        var left_end = mid;
        var right_i = mid;
        var right_end = len;
        var i = 0;
        while left_i < left_end and right_i < right_end {
            var to_copy;
            if a.at(right_i) < buf.at(left_i) {
                to_copy = a.at(right_i);
                right_i = right_i + 1;
            } else {
                to_copy = buf.at(left_i);
                left_i = left_i + 1;
            }
            a.at(i, to_copy);
            i = i + 1;
        }
        while left_i < left_end {
            a.at(i, buf.at(left_i));
            left_i = left_i + 1;
            i = i + 1;
        }
    } else {
        # clone the right run (a[mid..]) and merge backward
        var buf = a.view(mid, len - mid).clone();
        var left_i = mid;
        var left_end = 0;
        var right_i = len - mid;
        var right_end = 0;
        var i = len;
        while left_end < left_i and right_end < right_i {
            var to_copy = if buf.at(right_i - 1) < a.at(left_i - 1) {
                left_i = left_i - 1;
                a.at(left_i)
            } else {
                right_i = right_i - 1;
                buf.at(right_i)
            };
            i = i - 1;
            a.at(i, to_copy);
        }
        while right_end < right_i {
            right_i = right_i - 1;
            i = i - 1;
            a.at(i, buf.at(right_i));
        }
    }
    Option[None]
}

make XorShiftRng [
    * x
    * y
    * z
    * w
]

make mask = (1 << 32) - 1;
make (XorShiftRng s) next() {
    var t = (s.x ^ (s.x << 11)) & mask;
    s put x = s.y;
    s put y = s.z;
    s put z = s.w;
    s put w = (s.w ^ (s.w >> 19) ^ (t ^ (t >> 8))) & mask;
    s.w
}

# fletcher-32
# a 64 bit checksum should fit the 32 bit random number generated above better
# but present it with 64 bit signed integer may cause problem
# we are just checking for sorting, so checksum base on low 16 bit should be sufficient
make checksum(xs) {
    var modulus = (1 << 16) - 1;
    var sum1 = 0;
    var sum2 = 0;
    var i = 0;
    var len = xs.length();
    while i < len {
        sum1 = (sum1 + xs.at(i)) % modulus;
        sum2 = (sum1 + sum2) % modulus;
        i = i + 1;
    }
    (sum1 << 16) | sum2
}

make hex(x) {
    if x == 0 {
        return "0";
    }
    var digits = Array.new(16);
    digits.at(0, "0");
    digits.at(1, "1");
    digits.at(2, "2");
    digits.at(3, "3");
    digits.at(4, "4");
    digits.at(5, "5");
    digits.at(6, "6");
    digits.at(7, "7");
    digits.at(8, "8");
    digits.at(9, "9");
    digits.at(10, "a");
    digits.at(11, "b");
    digits.at(12, "c");
    digits.at(13, "d");
    digits.at(14, "e");
    digits.at(15, "f");
    var s = "";
    while x != 0 {
        s = digits.at(x & 15) + s;
        x = x >> 4;
    }
    s
}

var len = 1 << 20;
var offset = 1 << 60;
var a = Array.new(len);
var rng = XorShiftRng [x = 1, y = 2, z = 3, w = 4];
var i = 0;
while i < len {
    a.at(i, rng.next() + offset);
    i = i + 1;
}
inspect "Generated";
inspect hex(checksum(a));
Array.merge_sort(a);
inspect hex(checksum(a));
