WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

Program = _{ SOI ~ ProgramStmt* ~ EOI }


Expr = { Prefix* ~ PrimaryExpr ~ Postfix* ~ (Infix ~ Prefix* ~ PrimaryExpr ~ Postfix* )* }
    Infix = _{ Add | Sub | And | Or | LessThan | GreaterThan | Equal }
    Prefix = _ { Sub | Not | Inspect }
    Postfix = _ { Dot | Is | Match | As | Call1 }

    Add = { "+" }
    Sub = { "-" }
    And = { "and" }
    Or = { "or" }
    LessThan = { "<" }
    GreaterThan = { ">" }
    Equal = { "==" }
    Inspect = { "inspect" }
    Not = { "not" }
    Dot = { "." ~ Ident }
    Is = { "is" ~ Ident ~ Ident? }
    Match = { "is" ~ "{" ~ "}" } // TODO
    As = { ".!" ~ Ident }
    Call1 = { "." ~ CallArgs }

PrimaryExpr = _{
    BlockExpr
    | IfExpr
    | Call0Expr
    | CallNExpr
    | DataExpr
    | "(" ~ Expr ~ ")"
    | Ident
    | Integer
    | Float
    | String
}

BlockExpr = { "{" ~ Stmt* ~ ValueExpr? ~ "}" }
ValueExpr = { Expr }

IfExpr = { "if" ~ Expr ~ BlockExpr ~ ("else" ~ BlockExpr)? }

// call0 will also match some of the call1, because at this time there is no 
// enough information to distinguish a dotted imported name and a local name 
// that serves as single context argument (which by-design has higher priority), 
// so we only correct for the latter case in parsing code
// notice that a call on a product object's component must be wrapped with 
// parens, i.e. `(a.b).c()`, so `a.b.c()` will always resolve to some global
// function `a.b.c` and there's no confliction when there's more than one dot
Call0Expr = { PublicIdent ~ CallArgs }
CallNExpr = { CallArgs ~ "." ~ Ident ~ CallArgs }
CallArgs = { "(" ~ (Expr ~ ",")* ~ Expr? ~ ")" }

DataExpr = { PublicIdent ~ DataItems }
DataItems = { "[" ~ (DataItem ~ ",")* ~ DataItem? ~ "]" }
DataItem = { Ident ~ ("=" ~ (Expr | DataItems))? }


ProgramStmt = _{
    MakeTypeStmt
    | MakeFunctionStmt
    | Stmt
}

Stmt = _{
    VarStmt
    | AssignStmt
    | SetStmt
    | AssertStmt
    | WhileStmt
    | BreakStmt
    | ContinueStmt
    | ReturnStmt
    | IfExpr // allow omit semicolon for expr ending with blockexpr
    | Expr ~ ";"
}

MakeFunctionStmt = { "make" ~ PublicIdent ~ "(" ~ MakeFunctionParams ~ ")" ~ BlockExpr }
MakeFunctionParams = { (Ident ~ ",")* ~ Ident? }

MakeTypeStmt = { "make" ~ PublicIdent ~ MakeTypeItems }
MakeTypeItems = _{ "[" ~ (SumTypeItems | ProductTypeItems) ~ "]" }
SumTypeItems = { "+"? ~ TypeItem ~ ("+" ~ TypeItem)* }
ProductTypeItems = { "*"? ~ TypeItem ~ ("*" ~ TypeItem)* }
TypeItem = { Ident ~ MakeTypeItems? }

VarStmt = { "var" ~ Ident ~ ("=" ~ Expr)? ~ ";" }

AssignStmt = { Ident ~ "=" ~ Expr ~ ";" }

SetStmt = { Expr ~ "set" ~ Ident ~ "=" ~ Expr ~ ";" }

AssertStmt = { "assert" ~ Expr ~ ";" }

WhileStmt = { "while" ~ Expr ~ BlockExpr }

BreakStmt = { "break" ~ ";" }

ContinueStmt = { "continue" ~ ";" }

ReturnStmt = { "return" ~ Expr? ~ ";" }

Ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
PublicIdent = @{ Ident ~ ("." ~ Ident)* }

Integer = @{ ASCII_DIGIT+ }

Float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

String = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
