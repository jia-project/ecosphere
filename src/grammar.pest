WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

Program = _{ SOI ~ ProgramStmt* ~ EOI }


Expr = { Prefix* ~ PrimaryExpr ~ Postfix* ~ (Infix ~ Prefix* ~ PrimaryExpr ~ Postfix* )* }
    Infix = _{ 
        Add | Sub | Mul | Div | Rem 
        | BitAnd | BitOr | BitXor | Shl | Shr 
        | And | Or | Eq | Ne | Le | Ge | Lt | Gt 
    }
    Prefix = _ { Neg | Not | Inspect }
    Postfix = _ { Call1 | Dot | Is | Match | As }

    Add = { "+" }
    Sub = { "-" }
    Mul = { "*" }
    Div = { "/" }
    Rem = { "%" }
    BitAnd = { "&" }
    BitOr = { "|" }
    BitXor = { "^" }
    Shl = { "<<" }
    Shr = { ">>" }
    And = { "and" }
    Or = { "or" }
    Lt = { "<" }
    Gt = { ">" }
    Eq = { "==" }
    Ne = { "!=" }
    Le = { "<=" }
    Ge = { ">=" }

    Inspect = { "inspect" }
    Not = { "not" }
    Neg = { "-" }

    Dot = { "." ~ Ident }
    Is = { "is" ~ Ident ~ Ident? }
    Match = { "is" ~ "{" ~ "}" } // TODO
    As = { ".!" ~ Ident }
    Call1 = { "." ~ Ident ~ CallArgs }

PrimaryExpr = _{
    IfExpr
    | BlockExpr
    | Call0Expr
    | CallNExpr
    | DataExpr
    | "(" ~ Expr ~ ")"
    | Ident
    | Integer
    | Float
    | String
}

BlockExpr = { "{" ~ BlockStmts ~ Expr? ~ "}" }
// make sure if IfExpr ends a BlockExpr, it is considered as tailing `Expr`
// a little bit hacky, hope we will not extend this "feature"
BlockStmts = { (IfExpr? ~ Stmt)* }

IfExpr = { "if" ~ Expr ~ BlockExpr ~ ("else" ~ BlockExpr)? }

// call0 will also match some of the call1, because at this time there is no 
// enough information to distinguish a dotted imported name and a local name 
// that serves as single context argument (which by-design has higher priority), 
// so we only correct for the latter case in parsing code
// notice that a call on a product object's component must be wrapped with 
// parens, i.e. `(a.b).c()`, so `a.b.c()` will always resolve to some global
// function `a.b.c` and there's no confliction when there's more than one dot
Call0Expr = { PublicIdent ~ CallArgs }
CallNExpr = { CallArgs ~ "." ~ Ident ~ CallArgs }
CallArgs = { "(" ~ (Expr ~ ",")* ~ Expr? ~ ")" }

DataExpr = { PublicIdent ~ (DataItems | Fieldless) }
DataItems = { "[" ~ (DataItem ~ ",")* ~ DataItem? ~ "]" }
DataItem = { Ident ~ "=" ~ (Expr | DataItems) }
Fieldless = _{ "[" ~ Ident ~ "]" }


ProgramStmt = _{
    MakeTypeStmt
    | MakeFunctionStmt
    | Stmt
}

Stmt = _{
    VarStmt
    | AssignStmt
    | MakeAssignStmt
    | PutStmt
    | AssertStmt
    | WhileStmt
    | BreakStmt
    | ContinueStmt
    | ReturnStmt
    | Expr ~ ";"
}

MakeFunctionStmt = { "make" ~ (PublicIdent | ContextAndName) ~ "(" ~ FunctionParams ~ ")" ~ BlockExpr }
ContextAndName = { "(" ~ ContextParams ~ ")" ~ Ident }
ContextParams = { (ContextParam ~ ",")* ~ ContextParam }
ContextParam = { PublicIdent ~ Ident }
FunctionParams = { (Ident ~ ",")* ~ Ident? }

MakeTypeStmt = { "make" ~ PublicIdent ~ TypeItems }
TypeItems = _{ "[" ~ (SumTypeItems | ProductTypeItems) ~ "]" }
SumTypeItems = { "+"? ~ TypeItem ~ ("+" ~ TypeItem)* }
ProductTypeItems = { "*"? ~ TypeItem ~ ("*" ~ TypeItem)* }
TypeItem = { Ident ~ TypeItems? }

VarStmt = { "var" ~ Ident ~ ("=" ~ Expr)? ~ ";" }

AssignStmt = { Ident ~ "=" ~ Expr ~ ";" }

MakeAssignStmt = { "make" ~ PublicIdent ~ "=" ~ Expr ~ ";" }

PutStmt = { Expr ~ "put" ~ Ident ~ "=" ~ Expr ~ ";" }

AssertStmt = { "assert" ~ Expr ~ ";" }

WhileStmt = { "while" ~ Expr ~ BlockExpr }

BreakStmt = { "break" ~ ";" }

ContinueStmt = { "continue" ~ ";" }

ReturnStmt = { "return" ~ Expr? ~ ";" }


Ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
PublicIdent = @{ Ident ~ ("." ~ Ident)* }

Integer = @{ ASCII_DIGIT+ }

Float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

String = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
