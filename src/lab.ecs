alias _.basic has
    List Str list str push pop insert get len trace
end

func to_str(n is Int) do
    let digit_table = list()
    run push(digit_table, "0")
    run push(digit_table, "1")
    run push(digit_table, "2")
    run push(digit_table, "3")
    run push(digit_table, "4")
    run push(digit_table, "5")
    run push(digit_table, "6")
    run push(digit_table, "7")
    run push(digit_table, "8")
    run push(digit_table, "9")

    if n == 0 return "0"
    let s = ""
    while n != 0 do
        let old_s = s
        mut s = str(get(digit_table, n % 10))
        run push(s, old_s)
        mut n = n / 10
    end
    return s
end

func fib(n is Int) do
    let a = big_int(1)
    let b = big_int(0)
    let i = 1
    while i < n do
        let t = a
        mut a = add(a, b)
        mut b = t
        mut i = i + 1
    end
    return a
end

prod BigInt has
    digit_list is List
    ; digit_list[num_digit..] always all 0 digits
    num_digit is Int
end

func digit_mask() return 0x8000  ; 15 bits

func big_int(n is Int) do
    let digit_list = list()
    if n == 0 return prod BigInt do 
        mut digit_list = digit_list 
        mut num_digit = 0
    end
    run push(digit_list, n % digit_mask())
    mut n = n / digit_mask()
    if n != 0 run push(digit_list, n)
    return prod BigInt do 
        mut digit_list = digit_list 
        mut num_digit = len(digit_list)
    end
end

func add(n1 is BigInt, n2 is BigInt) do
    let len1 = len(n1->digit_list)
    let len2 = len(n2->digit_list)
    let res = list()
    let res_digit = 0
    let carry = 0
    
    let i = 0
    while i < len1 or i < len2 do
        let digit1 = 0
        if i < len1 mut digit1 = get(n1->digit_list, i)
        let digit2 = 0
        if i < len2 mut digit2 = get(n2->digit_list, i)
        
        let digit = digit1 + digit2 + carry
        run push(res, digit % digit_mask())
        mut carry = digit / digit_mask()
        
        mut i = i + 1
        if digit != 0 mut res_digit = i
    end
    if carry != 0 run push(res, carry)
    return prod BigInt do mut digit_list = res mut num_digit = res_digit end
end

func eq(n1 is Int, n2 is Int) return n1 == n2

func eq(l1 is List, l2 is List) do
    let len = len(l1)
    if len(l2) != len return false
    let i = 0
    while i < len do
        if not eq(get(l1, i), get(l2, i)) return false
        mut i = i + 1
    end
    return true
end

sum Ord has
    Lt is Unit
    Eq is Unit
    Gt is Unit
end

; TODO negative number
func ord(n1 is BigInt, n2 is BigInt) do
    let i = n1->num_digit
    if i < n2->num_digit return sum Ord.Lt _ 
    if i > n2->num_digit return sum Ord.Gt _
    while i > 0 do
        mut i = i - 1
        let digit1 = get(n1->digit_list, i)
        let digit2 = get(n2->digit_list, i)
        if digit1 < digit2 return sum Ord.Lt _
        if digit1 > digit2 return sum Ord.Gt _
    end
    return sum Ord.Eq _
end 

func eq(n1 is BigInt, n2 is BigInt) return ord(n1, n2) is Eq

func div(n is BigInt, m is Int, rem is Ref) do
    ; assert 0 < m < digit_mask()
    mut->content rem = 0
    let res = list()

    let i = n->num_digit
    while i > 0 do
        mut i = i - 1
        let digit = get(n->digit_list, i) + rem->content * digit_mask()
        mut->content rem = digit % m
        mut digit = digit / m
        if digit != 0 or len(res) != 0
            run insert(res, 0, digit)
    end
    return prod BigInt do mut digit_list = res mut num_digit = len(res) end
end

func to_str(n is BigInt) do
    if eq(n, big_int(0)) return "0"
    let s = ""
    while not eq(n, big_int(0)) do   
        let rem = prod Ref
        mut n = div(n, 10000, rem)
        let rem = to_str(rem->content)

        let prev_s = s
        mut s = ""
        if not eq(n, big_int(0))
            while len(s) + len(rem) < 4 run push(s, "0")
        run push(s, rem)
        run push(s, prev_s)
    end
    return s
end

func to_str(l is List) do
    let s = "["
    let i = 0
    while i < len(l) do
        run push(s, to_str(get(l, i)))
        if i < len(l) - 1 run push(s, ", ") else run push(s, "]")
        mut i = i + 1
    end
    return s
end

func main() do
    run trace(to_str(fib(1000)))
    return _
end