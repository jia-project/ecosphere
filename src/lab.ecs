func to_str(n is int) do
    let digit_table = _.basic.list()
    run _.basic.list_push(digit_table, "0")
    run _.basic.list_push(digit_table, "1")
    run _.basic.list_push(digit_table, "2")
    run _.basic.list_push(digit_table, "3")
    run _.basic.list_push(digit_table, "4")
    run _.basic.list_push(digit_table, "5")
    run _.basic.list_push(digit_table, "6")
    run _.basic.list_push(digit_table, "7")
    run _.basic.list_push(digit_table, "8")
    run _.basic.list_push(digit_table, "9")

    if n == 0 return "0"
    let s = ""
    while n != 0 do
        let old_s = s
        mut s = _.basic.str(_.basic.list_get(digit_table, n % 10))
        run _.basic.str_push(s, old_s)
        mut n = n / 10
    end
    return s
end

func fib(n is int) do
    let a = big_int(1)
    let b = big_int(0)
    let i = 1
    while i < n do
        let t = a
        mut a = add(a, b)
        mut b = t
        mut i = i + 1
    end
    return a
end

prod BigInt has
    digit_list is _.basic.List
end

func digit_mask() return 0x8000  ; 15 bits

func big_int(n is int) do
    let digit_list = _.basic.list()
    if n == 0 return prod BigInt do mut digit_list = digit_list end
    run _.basic.list_push(digit_list, n % digit_mask())
    mut n = n / digit_mask()
    if n != 0 run _.basic.list_push(digit_list, n)
    return prod BigInt do mut digit_list = digit_list end
end

func add(n1 is BigInt, n2 is BigInt) do
    let len1 = _.basic.list_len(n1->digit_list)
    let len2 = _.basic.list_len(n2->digit_list)
    let res = _.basic.list()
    let carry = 0
    let i = 0
    while i < len1 or i < len2 do
        let digit1 = 0
        if i < len1 mut digit1 = _.basic.list_get(n1->digit_list, i)
        let digit2 = 0
        if i < len2 mut digit2 = _.basic.list_get(n2->digit_list, i)
        let digit = digit1 + digit2 + carry
        run _.basic.list_push(res, digit % digit_mask())
        mut carry = digit / digit_mask()
        mut i = i + 1
    end
    if carry != 0 run _.basic.list_push(res, carry)
    return prod BigInt do mut digit_list = res end
end

func eq(n1 is int, n2 is int) return n1 == n2
func eq(n1 is BigInt, n2 is BigInt) return eq(n1->digit_list, n2->digit_list)
func eq(l1 is _.basic.List, l2 is _.basic.List) do
    let len = _.basic.list_len(l1)
    if _.basic.list_len(l2) != len return false
    let i = 0
    while i < len do
        if not eq(_.basic.list_get(l1, i), _.basic.list_get(l2, i)) return false
        mut i = i + 1
    end
    return true
end

; TODO negative number
func lt(n1 is BigInt, n2 is BigInt) do
    let len = _.basic.list_len(n1->digit_list)
    let len2 = _.basic.list_len(n2->digit_list)
    if len != len2 return len < len2
    let i = len
    while i > 0 do
        mut i = i - 1
        let digit1 = _.basic.list_get(n1->digit_list, i)
        let digit2 = _.basic.list_get(n2->digit_list, i)
        if digit1 != digit2 return digit1 < digit2
    end
    return false
end

func div(n is BigInt, m is int, rem is ref) do
    ; assert 0 < m < digit_mask()
    mut->content rem = 0
    let res = _.basic.list()
    let i = _.basic.list_len(n->digit_list)
    while i > 0 do
        mut i = i - 1
        let digit = _.basic.list_get(n->digit_list, i) 
            + rem->content * digit_mask()
        mut->content rem = digit % m
        mut digit = digit / m
        if digit != 0 or _.basic.list_len(res) != 0
            run _.basic.list_insert(res, 0, digit)
    end
    return prod BigInt do mut digit_list = res end
end

func to_str(n is BigInt) do
    if eq(n, big_int(0)) return "0"
    let s = ""
    while not eq(n, big_int(0)) do   
        let rem = prod ref
        mut n = div(n, 10000, rem)
        let rem = to_str(rem->content)

        let prev_s = s
        mut s = ""
        if not eq(n, big_int(0))
            while _.basic.str_len(s) + _.basic.str_len(rem) < 4
                run _.basic.str_push(s, "0")
        run _.basic.str_push(s, rem)
        run _.basic.str_push(s, prev_s)
    end
    return s
end

func to_str(l is _.basic.List) do
    let s = "["
    let i = 0
    while i < _.basic.list_len(l) do
        run _.basic.str_push(s, to_str(_.basic.list_get(l, i)))
        if i < _.basic.list_len(l) - 1 run _.basic.str_push(s, ", ")
        else run _.basic.str_push(s, "]")
        mut i = i + 1
    end
    return s
end

func main() do
    run _.basic.str_trace(to_str(fib(1000)))
    return _
end