alias _.basic has
    List Str list str push pop insert get len trace
end

func to_str(n is Int) do
    let digit_table = list()
    run push(digit_table, "0")
    run push(digit_table, "1")
    run push(digit_table, "2")
    run push(digit_table, "3")
    run push(digit_table, "4")
    run push(digit_table, "5")
    run push(digit_table, "6")
    run push(digit_table, "7")
    run push(digit_table, "8")
    run push(digit_table, "9")

    if n == 0 return "0"
    let s = ""
    while n != 0 do
        let old_s = s
        mut s = str(get(digit_table, n % 10))
        run push(s, old_s)
        mut n = n / 10
    end
    return s
end

func fib(n is Int) do
    let a = big_int(1)
    let b = big_int(0)
    let i = 1
    while i < n do
        let t = a
        mut a = add(a, b)
        mut b = t
        mut i = i + 1
    end
    return a
end

func eq(n1 is Int, n2 is Int) return n1 == n2

func eq(l1 is List, l2 is List) do
    let len = len(l1)
    if len(l2) != len return false
    let i = 0
    while i < len do
        if not eq(get(l1, i), get(l2, i)) return false
        mut i = i + 1
    end
    return true
end

sum Ord has
    Lt is Unit
    Eq is Unit
    Gt is Unit
end

func to_str(l is List) do
    let s = "["
    let i = 0
    while i < len(l) do
        run push(s, to_str(get(l, i)))
        if i < len(l) - 1 run push(s, ", ") else run push(s, "]")
        mut i = i + 1
    end
    return s
end

func main() do
    run trace(to_str(fib(1000)))
    return _
end