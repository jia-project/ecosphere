load _.vanilla.u64

alias _.basic has List Str list str push pop insert get len trace as_byte end
alias _.vanilla.u64
alias _.vanilla.u64.U64
alias _.vanilla.add

prod SipHash has
    k0 is U64
    k1 is U64

    state is State
    
    tail is U64
    tail_len is Int
    len is Int
end

prod State has
    v0 is U64
    v1 is U64
    v2 is U64
    v3 is U64
end

; TODO msg has :as_byte
func load_byte(msg, pos is Int, len is Int) do
    let w3 = 0
    let w2 = 0
    let w1 = 0
    let w0 = 0
    if len > 0 mut w0 = w0 | as_byte.get(msg, pos + 0)
    if len > 1 mut w0 = w0 | as_byte.get(msg, pos + 1) << 8
    if len > 2 mut w1 = w1 | as_byte.get(msg, pos + 2)
    if len > 3 mut w1 = w1 | as_byte.get(msg, pos + 3) << 8
    if len > 4 mut w2 = w2 | as_byte.get(msg, pos + 4)
    if len > 5 mut w2 = w2 | as_byte.get(msg, pos + 5) << 8
    if len > 6 mut w3 = w3 | as_byte.get(msg, pos + 6)
    if len > 7 mut w3 = w3 | as_byte.get(msg, pos + 7) << 8
    return u64.new(w3, w2, w1, w0)
end

func sip_round(h is State) do
    mut->v0 h = add(h->v0, h->v1)
    mut->v1 h = u64.rotl(h->v1, 13)
    mut->v1 h = u64.xor(h->v1, h->v0)
    mut->v0 h = u64.rotl(h->v0, 32)
    mut->v2 h = add(h->v2, h->v3)
    mut->v3 h = u64.rotl(h->v3, 16)
    mut->v3 h = u64.xor(h->v3, h->v2)
    mut->v0 h = add(h->v0, h->v3)
    mut->v3 h = u64.rotl(h->v3, 21)
    mut->v3 h = u64.xor(h->v3, h->v0)
    mut->v2 h = add(h->v2, h->v1)
    mut->v1 h = u64.rotl(h->v1, 17)
    mut->v1 h = u64.xor(h->v1, h->v2)
    mut->v2 h = u64.rotl(h->v2, 32)
    return _
end

func new(k0 is U64, k1 is U64) return prod SipHash do
    mut state = prod State
    mut tail = u64.new(0, 0, 0, 0)
    mut k0 = k0
    mut k1 = k1
end

func reset(h is SipHash) do
    mut->len h = 0
    mut->tail_len h = 0
    mut->v0 h->state = u64.xor(h->k0, u64.new(0x736f, 0x6d65, 0x7073, 0x6575))
    mut->v1 h->state = u64.xor(h->k1, u64.new(0x646f, 0x7261, 0x6e64, 0x6f6d))
    mut->v2 h->state = u64.xor(h->k0, u64.new(0x6c79, 0x6765, 0x6e65, 0x7261))
    mut->v3 h->state = u64.xor(h->k1, u64.new(0x7465, 0x6462, 0x7974, 0x6573))
    return _
end

; TODO msg has :as_byte
func write(h is SipHash, msg) do
    let len = as_byte.len(msg)
    mut->len h = h->len + len
    let needed = 0
    if h->tail_len != 0 do
        mut needed = 8 - h->tail_len
        if len < needed do
            ; using add as bitwise or, assert no carry
            ; using rotl as shl, assert no wrapping back
            mut->tail h = 
                add(h->tail, u64.rotl(load_byte(msg, 0, len), h->tail_len * 8))
            return _
        end 
        else do
            mut->tail h = 
                add(h->tail, u64.rotl(load_byte(msg, 0, needed), h->tail_len * 8))
            mut->v3 h->state = u64.xor(h->state->v3, h->tail)
            run sip_round(h->state)
            mut->v0 h->state = u64.xor(h->state->v0, h->tail)
            mut->tail_len h = 0
        end
    end
    mut len = len - needed
    let left = len % 8

    let i = needed
    while i < len - left do
        let mi = load_byte(msg, i, 8)
        mut->v3 h->state = u64.xor(h->state->v3, mi)
        run sip_round(h->state)
        mut->v0 h->state = u64.xor(h->state->v0, mi)
        mut i = i + 8
    end

    mut->tail h = load_byte(msg, i, left)
    mut->tail_len h = left
    return _
end

func finish(h is SipHash) do
    let state = prod State do
        mut v0 = u64.new(h->state->v0)
        mut v1 = u64.new(h->state->v1)
        mut v2 = u64.new(h->state->v2)
        mut v3 = u64.new(h->state->v3)
    end

    ; b = tail | (len & 0xff) << 56
    let b = add(h->tail, u64.new((h->len & 0xff) << 8, 0, 0, 0))
    mut->v3 state = u64.xor(state->v3, b)
    run sip_round(state)
    mut->v0 state = u64.xor(state->v0, b)

    mut->v2 state = u64.xor(state->v2, u64.new(0, 0, 0, 0xff))
    run sip_round(state)
    run sip_round(state)
    run sip_round(state)

    return u64.xor(u64.xor(u64.xor(state->v0, state->v1), state->v2), state->v3)
end